name: deploy_pipeline
on:
  push:
    branches: [main]

env:
  BRANCH_NAME: ${{ github.ref_name }}
  SERVER_API_IMAGE_NAME: gcr.io/${{secrets.GCP_PROJECT_ID}}/server-api-${{github.ref_name}}-image
  CLIENT_WEB_IMAGE_NAME: gcr.io/${{secrets.GCP_PROJECT_ID}}/client-web-${{github.ref_name}}-image

  GCP_PROJECT_ID: ${{secrets.GCP_PROJECT_ID}}
  GCP_SERVICE_ACCOUNT_EMAIL: ${{secrets.GCP_SERVICE_ACCOUNT_EMAIL}}
  GCP_SERVICE_ACCOUNT_KEY: ${{secrets.GCP_SERVICE_ACCOUNT_KEY}}

  VPS_IP: ${{secrets.VPS_IP}}
  VPS_USERNAME: ${{secrets.VPS_USERNAME}}
  VPS_USER_PASSWORD: ${{secrets.VPS_USER_PASSWORD}}
  VPS_UPDATE_IMAGES_SCRIPT: /etc/admin-data/update-revision.ps1

jobs:
  build_and_push_images:
    name: Build and push images
    runs-on: ubuntu-latest

    steps:
      # ----- checkout
      - name: Checkout
        uses: actions/checkout@v3

      # ------ setup google cloud platform
      - name: Login to GCP
        uses: google-github-actions/setup-gcloud@v0
        with:
          project_id: ${{env.GCP_PROJECT_ID}}
          service_account_email: ${{env.GCP_SERVICE_ACCOUNT_EMAIL}}
          service_account_key: ${{env.GCP_SERVICE_ACCOUNT_KEY}}

      # ------ configure GCP docker since we're using GCR as a registry
      - name: Configure GCP Docker
        run: gcloud auth configure-docker --quiet

      # ------ build server-api
      - name: Build server-api
        shell: pwsh
        run: |
          docker build . `
            --file "./packages/server-api/server-api.Dockerfile" `
            --tag ${{env.SERVER_API_IMAGE_NAME}}

      # ------ build client-web
      - name: Build client-web
        shell: pwsh
        run: |
          docker build . `
            --file "./packages/client-web/client-web.Dockerfile" `
            --tag ${{env.CLIENT_WEB_IMAGE_NAME}}

      # ------ push images
      - name: Push server-api
        run: |
          docker push ${{env.SERVER_API_IMAGE_NAME}}
          docker push ${{env.CLIENT_WEB_IMAGE_NAME}}

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [build_and_push_images]

    steps:
      - name: Deploy images to VPS
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{env.VPS_IP}}
          username: ${{env.VPS_USERNAME}}
          password: ${{env.VPS_USER_PASSWORD}}
          port: 22
          script: |
            echo "Activating service account and project..."
            gcloud auth activate-service-account --key-file /etc/admin-data/keys/zoosher.json --project zoosher

            echo "Configure Docker auth..."
            gcloud auth configure-docker

            echo "Stop old container..."
            docker stop zoosher-container-server-api
            docker stop zoosher-container-client-web

            echo "Remove old container..."
            docker rm zoosher-container-server-api
            docker rm zoosher-container-client-web

            echo "Pull new image..."
            docker pull ${{env.SERVER_API_IMAGE_NAME}}
            docker pull ${{env.CLIENT_WEB_IMAGE_NAME}}

            echo "Create new container..."
            docker create -p 5002:5002 --name zoosher-container-server-api ${{env.SERVER_API_IMAGE_NAME}}
            docker create -p 3002:3002 --name zoosher-container-client-web ${{env.CLIENT_WEB_IMAGE_NAME}}

            echo "Start new container..."
            docker start zoosher-container-server-api
            docker start zoosher-container-client-web
